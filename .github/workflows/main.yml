name: CI

on: [push, pull_request, workflow_dispatch]
# "workflow_dispatch" Allows you to run this workflow manually from the Actions tab

jobs:
  lint-luacheck:
    runs-on: ubuntu-latest
    name: Luacheck
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Run Luacheck
        uses: nebularg/actions-luacheck@v1
        with:
          annotate: "error"

  lint-shellcheck:
    runs-on: ubuntu-latest
    name: ShellCheck
    steps:
      - uses: actions/checkout@v2
      - name: ShellCheck
        uses: ludeeus/action-shellcheck@1.0.0
        with:
          # Directory to be searched for files. Defaults to .
          scandir: ./bin # optional, default is .

  lint-with-PSScriptAnalyzer:
    name: PSScriptAnalyzer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install PSScriptAnalyzer module
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -ErrorAction Stop
      - name: Lint with PSScriptAnalyzer
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path *.ps1 -Recurse -Outvariable issues
          $errors   = $issues.Where({$_.Severity -eq 'Error'})
          $warnings = $issues.Where({$_.Severity -eq 'Warning'})
          if ($errors) {
              Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
          } else {
              Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
          }
      - name: Install PSScriptAnalyzer module
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -ErrorAction Stop
      - name: Lint with PSScriptAnalyzer
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path ./bin/*.ps1 -Recurse -Outvariable issues
          $errors   = $issues.Where({$_.Severity -eq 'Error'})
          $warnings = $issues.Where({$_.Severity -eq 'Warning'})
          if ($errors) {
              Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
          } else {
              Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
          }
